# <comment>–§–∞–π–ª —Å –∫–ª–∞—Å—Å–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏</comment>
import os
import re
import fnmatch


class RecursiveGrapher():
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏, –≥–ª—É–±–∏–Ω–æ–π –æ—Ç—Å—Ç—É–ø–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π –∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
    """
    DIR_COMMENT_FILE_NAME = "comment"
    DIR_INDENT_DEPTH = 4
    def __init__(self, indent_depth=4, dir_comment_file_name="comment"):
        self.DIR_INDENT_DEPTH = indent_depth
        self.DIR_COMMENT_FILE_NAME = dir_comment_file_name

    def get_file_comment(self, file_path: str):
        """
        –ú–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—Ç—Ä–æ–∫—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –∫–æ—Ç–æ—Ä–∞—è –∏–¥—ë—Ç –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –≥—Ä–∞—Ñ–µ.
        """
        try:
            with open(file_path, encoding="utf-8") as f:
                f_text = f.read()
                comment_match = re.search(r"<comment>(.*?)</comment>", f_text)
                if comment_match:
                    return " # " + comment_match.group(1)
        except UnicodeDecodeError:
            return ""
        return ""
    
    def get_dir_comment(self, dir_path: str):
        """
        –ú–µ—Ç–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—Ç—Ä–æ–∫—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –∫–æ—Ç–æ—Ä–∞—è –∏–¥—ë—Ç –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ –≤ –≥—Ä–∞—Ñ–µ.
        """
        dir_comment_file = os.path.join(dir_path, RecursiveGrapher.DIR_COMMENT_FILE_NAME)
        if os.path.exists(dir_comment_file) and os.path.isfile(dir_comment_file):
            with open(dir_comment_file, encoding="utf-8") as f:
                return " # " + f.readlines()[0]
        else:
            return ""
     
    def generate_markdown(self, dir_path: str, ignore: list[str], indent=0):
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π —Å—Ç—Ä–æ–∫–∏ markdown —Ä–∞–∑–º–µ—Ç–∫–∏ c –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤.
        """
        markdown_lines = []
        if not os.path.isdir(dir_path):
            return ""
        items = os.listdir(dir_path)
        for item in items:
            item_path = os.path.join(dir_path, item)
            relative_path = os.path.relpath(item_path, dir_path)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è. 
            if any(fnmatch.fnmatch(item_path, ignore_item) or fnmatch.fnmatch(item, ignore_item) or fnmatch.fnmatch(relative_path, ignore_item) for ignore_item in ignore):
                continue
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç - —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.
            if os.path.isdir(item_path):
                markdown_lines.append(f"|{'-' * self.DIR_INDENT_DEPTH * indent}üìÅ{item}{self.get_dir_comment(item_path)}")
                markdown_lines.extend(self.generate_markdown(item_path, ignore, indent+1))
            else:
                if item != self.DIR_COMMENT_FILE_NAME:
                    markdown_lines.append(f"|{'-' * self.DIR_INDENT_DEPTH * indent}üíæ{item}{self.get_file_comment(item_path)}")
        return markdown_lines
